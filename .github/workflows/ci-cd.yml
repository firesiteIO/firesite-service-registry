name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run security audit
        run: npm audit --audit-level=moderate

  test:
    name: Test Suite (Node.js ${{ matrix.node-version }})
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [18, 20]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run type checking
        run: npm run type-check
        
      - name: Run tests
        run: npm run test:run -- src/__tests__/service-registry-simple.test.ts src/__tests__/browser-registry.test.ts src/__tests__/node-registry.test.ts src/__tests__/index.test.ts src/__tests__/types.test.ts
        
      - name: Run lint
        run: npm run lint:check

  build:
    name: Build Package
    runs-on: ubuntu-latest
    needs: [security-audit, test]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Build package
        run: npm run build
        
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: dist/

  publish:
    name: Publish to NPM
    runs-on: ubuntu-latest
    needs: [security-audit, test, build]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          registry-url: 'https://registry.npmjs.org'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: dist
          path: dist/
          
      - name: Check if version changed
        id: version-check
        run: |
          CURRENT_VERSION=$(npm show @firesite/service-registry version 2>/dev/null || echo "0.0.0")
          PACKAGE_VERSION=$(node -p "require('./package.json').version")
          echo "current=$CURRENT_VERSION" >> $GITHUB_OUTPUT
          echo "package=$PACKAGE_VERSION" >> $GITHUB_OUTPUT
          if [ "$CURRENT_VERSION" != "$PACKAGE_VERSION" ]; then
            echo "changed=true" >> $GITHUB_OUTPUT
          else
            echo "changed=false" >> $GITHUB_OUTPUT
          fi
          
      - name: Publish to NPM
        if: steps.version-check.outputs.changed == 'true'
        run: npm publish
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
          
      - name: Skip publish (no version change)
        if: steps.version-check.outputs.changed == 'false'
        run: |
          echo "Version ${{ steps.version-check.outputs.package }} already published"
          echo "Skipping NPM publish step"

  notify:
    name: Notify Success
    runs-on: ubuntu-latest
    needs: [security-audit, test, build, publish]
    if: always() && needs.security-audit.result == 'success' && needs.test.result == 'success' && needs.build.result == 'success'
    
    steps:
      - name: Success notification
        run: |
          echo "üéâ CI/CD Pipeline completed successfully!"
          echo "‚úÖ Security audit passed"
          echo "‚úÖ All tests passed"
          echo "‚úÖ Build completed"
          if [ "${{ needs.publish.result }}" == "success" ]; then
            echo "‚úÖ Package published to NPM"
          elif [ "${{ needs.publish.result }}" == "skipped" ]; then
            echo "‚ÑπÔ∏è NPM publish skipped (not main branch or no version change)"
          fi